#include<stdlib.h>
#include<stdio.h>
#include<glut.h>
int x1, x2, x3, x4, y1, y2, y3, y4;
int le[500], re[500];

void myinit()
{
	glColor3f(1,0,1);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 499.0, 0.0, 499.0); 
	glMatrixMode(GL_MODELVIEW);

}

 void draw(int x, int y)
{
	 glBegin(GL_POINTS);
	
	 glVertex2i(x, y);
	
	glEnd();
	glFlush();
}
void menu_d(int op)
{
	if (op == 1)
	{
		glColor3f(1, 0, 0);
	}
	if (op == 2)
	{
		glColor3f(0, 1, 0);
	}
	if (op == 3)
	{
		glColor3f(01, 0, 1);
	}
	glutPostRedisplay();
}
void edgedetect(int x1, int  y1, int  x2, int  y2)
{
	int temp, mx, x;
	if ((y2 - y1) < 0)
	{
		temp = y1;
		y1 = y2;
		y2 = temp;
		temp = x1;
		x1 = x2;
		x2 = temp;
	}
	if ((y2 - y1) != 0)
	
		mx = (x2 - x1) / (y2 - y1);
	x = x1;

	for (int i = y1; i < y2; i++)
	{
		if (x < le[i])
			le[i] = x;
		if (x > re[i])
			re[i] = x;
		x = x + mx;
	}
  
}
void scan(int x1, int  y1,int  x2,int  y2,int  x3,int y3,int  x4,int  y4)
{
	int y, i;

	for ( i = 0; i < 500; i++)
	{
		le[i] = 500;
		re[i] = 0;
	}
	edgedetect(x1, y1, x2, y2);
	edgedetect(x2, y2, x3, y3);
	edgedetect(x3, y3, x4, y4);
	edgedetect(x4, y4, x1, y1);
	for (y = 0; y < 500; y++)
	{
		if (le[y] < re[y])
			for (i = le[y]; i < re[y]; i++)
				draw(i, y);
	}
	
}
void display()
{
	glClearColor(1, 1, 1, 1);
	glClear(GL_COLOR_BUFFER_BIT);

	x1=200, x2=100, x3=200, x4=300, y1=200, y2=300, y3=400, y4=300;

	glBegin(GL_LINE_LOOP);

		glVertex2f(x1, y1);
		glVertex2f(x2, y2);
		glVertex2f(x3, y3);
		glVertex2f(x4, y4);
  
	glEnd();
	scan(x1, y1, x2, y2 ,x3, y3,x4,y4);
}

void main()
{
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(500, 500);
	glutCreateWindow("Filling a polygon using scanline algorithm");

	glutCreateMenu(menu_d);
	glutAddMenuEntry("red", 1);
	glutAddMenuEntry("green", 2);
	glutAddMenuEntry("blue", 3);
	glutAttachMenu(GLUT_RIGHT_BUTTON);

	myinit();
	glutDisplayFunc(display);
	glutMainLoop();

}
