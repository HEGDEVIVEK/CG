#include<stdlib.h>
#include<stdio.h>
#include<glut.h>
#include<math.h>

int theta[3] = { 0,0,0 };
float v[8][3] = { {-1,-1,-1},{1,-1,-1},{1,-1,1},{-1,-1,1},{-1,1,1},{-1,1,-1},{1,1,-1},{1,1,1} };
float x[8][3] = { {0,0,0},{1,0,0},{1,0,1},{0,0,1},{0,1,1},{0,1,0},{1,1,0},{1,1,1} };
int flag = 2;


void myinit()
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-2, 2, -2, 2, -2, 2);
	glMatrixMode(GL_MODELVIEW);
}
void idle()
{
	theta[flag]++;
	if (theta[flag] > 360)
		theta[flag] = 0;
	for(int i=0; i<10000000; i++)
	glutPostRedisplay();
}

void mouse(int b, int s, int x, int y)
{
	if (b == GLUT_LEFT_BUTTON && s == GLUT_DOWN)
		flag = 0;
	if (b == GLUT_RIGHT_BUTTON && s == GLUT_DOWN)
		flag = 1;
	if (b == GLUT_MIDDLE_BUTTON && s == GLUT_DOWN)
		flag = 2;
	
}

void cube(int a, int b, int c, int d)
{
	glBegin(GL_POLYGON);

	glColor3fv(x[a]);
	glVertex3fv(v[a]);
	glColor3fv(x[b]);
	glVertex3fv(v[b]);
	glColor3fv(x[c]);
	glVertex3fv(v[c]);
	glColor3fv(x[d]);
	glVertex3fv(v[d]);
	glEnd();
}

void draw()
{
	cube(0, 1, 2, 3);
	cube(3, 4, 5, 0);
	cube(4, 5, 6, 1);
	cube(5, 6, 1, 0);
	cube(7, 6, 1, 2);
	cube(7, 2, 3, 4);
}

void  display()
{
	glClearColor(1, 1, 1, 1);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glColor3f(0, 0, 1);
	glEnable(GL_DEPTH_TEST);
	glLoadIdentity();

	//gluLookAt(view[0], view[1], view[2], 0, 0, 0, 1, 1, 0);
	glRotatef(theta[0], 1, 0, 0);
	glRotatef(theta[1], 0, 1, 0);
	glRotatef(theta[2], 0, 0, 1);

	draw();
	glFlush();
	glutSwapBuffers();
}

void main()
{
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowSize(500, 500);
	glutCreateWindow("cube rotation");


	myinit();
	glutDisplayFunc(display);

	glutMouseFunc(mouse);
	glutIdleFunc(idle);
	glutMainLoop();
}
